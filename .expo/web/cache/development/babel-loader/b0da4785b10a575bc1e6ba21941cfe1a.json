{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\hp\\\\Desktop\\\\foodopedia\\\\src\\\\screens\\\\ResultsShowScreens.js\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport yelp from \"../api/yelp\";\n\nvar ResultsShowScreens = function ResultsShowScreens(_ref) {\n  var navigation = _ref.navigation;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      result = _useState2[0],\n      setResult = _useState2[1];\n\n  var id = navigation.getParam('id');\n  console.log(result);\n\n  var getResult = function getResult(id) {\n    var response;\n    return _regeneratorRuntime.async(function getResult$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(yelp.get(\"/\" + id));\n\n          case 2:\n            response = _context.sent;\n            setResult(response.data);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    getResult(id);\n  }, []);\n\n  if (!result) {\n    return null;\n  }\n\n  return React.createElement(View, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 12\n    }\n  }, React.createElement(Text, {\n    style: styles.text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, result.name), React.createElement(Text, {\n    style: styles.phone,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, \"Phone no. is : \", result.phone), React.createElement(Text, {\n    style: styles.phone,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, \"Address is : \", result.location.address1, \" , \", result.location.city), React.createElement(FlatList, {\n    data: result.photos,\n    keyExtractor: function keyExtractor(photo) {\n      return photo;\n    },\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(Image, {\n        style: styles.image,\n        source: {\n          uri: item\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 20\n        }\n      });\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }\n  }));\n};\n\nvar styles = StyleSheet.create({\n  image: {\n    height: 200,\n    width: 300,\n    marginBottom: 5\n  },\n  phone: {\n    color: 'gray',\n    fontSize: 16\n  },\n  text: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    color: 'black'\n  }\n});\nexport default ResultsShowScreens;","map":{"version":3,"sources":["C:/Users/hp/Desktop/foodopedia/src/screens/ResultsShowScreens.js"],"names":["React","useState","useEffect","yelp","ResultsShowScreens","navigation","result","setResult","id","getParam","console","log","getResult","get","response","data","styles","text","name","phone","location","address1","city","photos","photo","item","image","uri","StyleSheet","create","height","width","marginBottom","color","fontSize","fontWeight"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;;;;AAEA,OAAOC,IAAP;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,OAAkB;AAAA,MAAhBC,UAAgB,QAAhBA,UAAgB;;AAAA,kBACdJ,QAAQ,CAAC,IAAD,CADM;AAAA;AAAA,MAClCK,MADkC;AAAA,MAC3BC,SAD2B;;AAEzC,MAAMC,EAAE,GAAEH,UAAU,CAACI,QAAX,CAAoB,IAApB,CAAV;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;;AAEA,MAAMM,SAAS,GAAG,SAAZA,SAAY,CAAOJ,EAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CACSL,IAAI,CAACU,GAAL,OAAaL,EAAb,CADT;;AAAA;AACRM,YAAAA,QADQ;AAEdP,YAAAA,SAAS,CAACO,QAAQ,CAACC,IAAV,CAAT;;AAFc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAIAb,EAAAA,SAAS,CAAC,YAAI;AACVU,IAAAA,SAAS,CAACJ,EAAD,CAAT;AACH,GAFQ,EAEP,EAFO,CAAT;;AAGA,MAAG,CAACF,MAAJ,EACA;AACI,WAAO,IAAP;AACH;;AACD,SAAO,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACH,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEU,MAAM,CAACC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4BX,MAAM,CAACY,IAAnC,CADG,EAEH,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEF,MAAM,CAACG,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAA4Cb,MAAM,CAACa,KAAnD,CAFG,EAGH,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEH,MAAM,CAACG,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAA0Cb,MAAM,CAACc,QAAP,CAAgBC,QAA1D,SAAuEf,MAAM,CAACc,QAAP,CAAgBE,IAAvF,CAHG,EAIH,oBAAC,QAAD;AACA,IAAA,IAAI,EAAEhB,MAAM,CAACiB,MADb;AAEA,IAAA,YAAY,EAAE,sBAACC,KAAD;AAAA,aAAUA,KAAV;AAAA,KAFd;AAGA,IAAA,UAAU,EAAE,2BAAU;AAAA,UAARC,IAAQ,SAARA,IAAQ;AAClB,aAAO,oBAAC,KAAD;AAAO,QAAA,KAAK,EAAET,MAAM,CAACU,KAArB;AAA4B,QAAA,MAAM,EAAE;AAACC,UAAAA,GAAG,EAACF;AAAL,SAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH,KALD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJG,CAAP;AAYH,CA7BD;;AA+BA,IAAMT,MAAM,GAAGY,UAAU,CAACC,MAAX,CAAkB;AAC7BH,EAAAA,KAAK,EAAC;AACFI,IAAAA,MAAM,EAAC,GADL;AAEFC,IAAAA,KAAK,EAAC,GAFJ;AAGFC,IAAAA,YAAY,EAAC;AAHX,GADuB;AAM7Bb,EAAAA,KAAK,EAAC;AACFc,IAAAA,KAAK,EAAC,MADJ;AAEFC,IAAAA,QAAQ,EAAC;AAFP,GANuB;AAW7BjB,EAAAA,IAAI,EAAC;AACDiB,IAAAA,QAAQ,EAAC,EADR;AAEDC,IAAAA,UAAU,EAAC,MAFV;AAGDF,IAAAA,KAAK,EAAC;AAHL;AAXwB,CAAlB,CAAf;AAkBA,eAAe7B,kBAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport {View,StyleSheet,Button,Text,Image,FlatList} from 'react-native';\r\nimport yelp from '../api/yelp';\r\n\r\nconst ResultsShowScreens = ({navigation}) => {\r\n    const [result,setResult] = useState(null);\r\n    const id= navigation.getParam('id');\r\n\r\n    console.log(result);\r\n    \r\n    const getResult = async (id) => {\r\n        const response = await yelp.get(`/${id}`);\r\n        setResult(response.data);\r\n    }\r\n    useEffect(()=>{\r\n        getResult(id);\r\n    },[])\r\n    if(!result)\r\n    {\r\n        return null;\r\n    }\r\n    return <View>\r\n        <Text style={styles.text} >{result.name}</Text>\r\n        <Text style={styles.phone} >Phone no. is : {result.phone}</Text>\r\n        <Text style={styles.phone} >Address is : {result.location.address1} , {result.location.city}</Text>\r\n        <FlatList \r\n        data={result.photos}\r\n        keyExtractor={(photo)=> photo}\r\n        renderItem={({item})=>{\r\n            return <Image style={styles.image} source={{uri:item}}/>\r\n        }}\r\n        />\r\n    </View>\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    image:{\r\n        height:200,\r\n        width:300,\r\n        marginBottom:5\r\n    },\r\n    phone:{\r\n        color:'gray',\r\n        fontSize:16\r\n    }\r\n    ,\r\n    text:{\r\n        fontSize:18,\r\n        fontWeight:'bold',\r\n        color:'black'\r\n    }\r\n});\r\n\r\nexport default ResultsShowScreens;"]},"metadata":{},"sourceType":"module"}